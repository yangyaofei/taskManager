#!/usr/bin/python
# coding:utf-8

import cgi
import cgitb
import os
import sys
import json
from tools import sockets
from tools import parse
from tools import common
from DB import taskDB
from DB import taskResultDB
from openpyxl import Workbook
# from memory_profiler import profile

reload(sys)
sys.setdefaultencoding("utf-8")
cgitb.enable()
# 此脚本处理所有的通过ID进行的请求
# 	包括:
# 		startTask		B
# 		stopTask		S
# 		restartTask		R
# 		deleteTask		F
# 		getResult		G
# 		deleteResult	D
# 		getTask			C
# 	参数:
# 	task_ID
# 	request


def getResultName(task):
	return str(task.task_ID) + "_"\
		+ str(task.task_create_time.date()) + "_"\
		+ str(task.task_name) + ".xlsx"


def saveToSheet(sheet, task_ID, resultType):
	result = taskResultDB.getResult(task_ID, resultType)
	result = taskResultDB.tranDataToList(result)
	result = result[resultType]
	for i in result:
		sheet.append(i)
	result = []
	gc.collect()
	return sheet


form = cgi.FieldStorage()
task_ID = int(form.getvalue(parse.TASK_KEY.task_ID))
request = form.getvalue(parse.MAIN_KEY.request)
response = {}
if request == parse.REQUEST.startTask:
	data = parse.parseToBinStartTask(task_ID)
	socket = sockets.connectServer()
	socket.send(data)
	data = sockets.recv(socket)
	response = json.loads(data)
elif request == parse.REQUEST.stopTask:
	data = parse.parseToBinStopTask(task_ID)
	socket = sockets.connectServer()
	socket.send(data)
	data = sockets.recv(socket)
	response = json.loads(data)
elif request == parse.REQUEST.getTask:
	task = taskDB.getTaskInfo(int(task_ID))
	response = {
		parse.TASK_KEY.task_ID: task.task_ID,
		parse.TASK_KEY.task_data: task.task_data,
		parse.TASK_KEY.task_status: task.task_status,
		parse.TASK_KEY.task_name: task.task_name,
		parse.TASK_KEY.task_para: task.task_para,
		parse.TASK_KEY.task_type: task.task_type,
		parse.TASK_KEY.task_create_time: task.task_create_time,
		parse.TASK_KEY.task_finish_time: task.task_finish_time
	}
elif request == parse.REQUEST.restartTask:
	taskResultDB.deleteResult(int(task_ID))
	task = taskDB.getTaskInfo(int(task_ID))
	if task.task_status != parse.TASK_STATUS.error:
		response[parse.MAIN_KEY.request] = parse.REQUEST.error
	else:
		task.task_status = parse.TASK_STATUS.addTask
		task.task_data = ""
		taskDB.changeTaskInfo(task)
		response[parse.MAIN_KEY.request] = parse.REQUEST.ok
elif request == parse.REQUEST.deleteTask:
	taskResultDB.deleteResult(int(task_ID))
	task = taskDB.getTaskInfo(int(task_ID))
	from tools import config
	result_path = config.getResultPath()
	result_path = result_path[0]
	result_name = getResultName(task)
	if os.path.exists(result_path + result_name):
		os.remove(result_path + result_name)
	if task.task_status == parse.TASK_STATUS.addTask or \
		task.task_status == parse.TASK_STATUS.error or\
		task.task_status == parse.TASK_STATUS.complete:
		taskDB.dropTaskInfo(int(task_ID))
		response[parse.MAIN_KEY.request] = parse.REQUEST.ok
	else:
		response[parse.MAIN_KEY.request] = parse.REQUEST.error
elif request == parse.REQUEST.getResult:
	task = taskDB.getTaskInfo(int(task_ID))
	from tools import config
	file_path, web_path = config.getResultPath()
	file_name = getResultName(task)
	import gc
	from tools import logger
	log = logger.getLogger(logger.logging.INFO, file_path + "cgi.log")
	if task.task_status != parse.TASK_STATUS.complete:
		response[parse.MAIN_KEY.request] = parse.REQUEST.error
	elif os.path.isfile(file_path + file_name):
		response[parse.MAIN_KEY.request] = parse.REQUEST.ok
		response[parse.MAIN_KEY.patamenter] = web_path + file_name
	else:
		log.info("start")
		# result = taskResultDB.getResult(task_ID)
		wb = Workbook(write_only=True)
		# ws_sum = wb.active
		ws_sum = wb.create_sheet()
		ws_sum.title = u"词频"
		ws_frq = wb.create_sheet()
		ws_frq.title = u"出现次数"
		ws_tfidf = wb.create_sheet()
		ws_tfidf.title = u"TFIDF"
		ws_tfidf_2 = wb.create_sheet()
		ws_tfidf_2.title = u"TFIDF_2"
		# ++++++++++++++++++++++++++
		ws_frq_other = wb.create_sheet()
		ws_frq_other.title = u"other_frq"
		ws_sum_other = wb.create_sheet()
		ws_sum_other.title = u"other_sum"
		# ++++++++++++++++++++++++++
		log.info("write to sheel")
		ws_sum = saveToSheet(ws_sum, task_ID, taskResultDB.resultType.FRQ_SUM)
		ws_frq = saveToSheet(ws_frq, task_ID, taskResultDB.resultType.FRQ_COUNT)
		ws_tfidf = saveToSheet(ws_tfidf, task_ID, taskResultDB.resultType.TFIDF)
		ws_tfidf_2 = saveToSheet(
			ws_tfidf_2, task_ID, taskResultDB.resultType.TFIDF_2)
		# ++++++++++++++++++++++++++++++++++++++++++++++++++++
		ws_sum_other = saveToSheet(
			ws_sum_other, task_ID, taskResultDB.resultType.ABSTRACT)
		ws_frq_other = saveToSheet(
			ws_frq_other, task_ID, taskResultDB.resultType.CLAIM)
		# ++++++++++++++++++++++++++++++++++++++++++++++++++++
		log.info("save to sheet over")
		# iterator = 0  # 用于循环计数,达到1000进行一次cg
		# log.info("write to sheet")
		wb.save(file_path + file_name)
		log.info("save file")
		response[parse.MAIN_KEY.request] = parse.REQUEST.ok
		response[parse.MAIN_KEY.patamenter] = web_path + file_name


print "Content-type:application/json\r\n\r"
print(json.dumps(response, cls=common.JsonEncoder))
